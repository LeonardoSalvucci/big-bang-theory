---
import Logo from '../components/Logo.astro';
import Layout from '../layouts/Layout.astro';
import CharacterCard from '../components/CharacterCard.astro';
import { PaginatedResponse } from '../types';
import Pagination from '../components/Pagination.astro';

const { searchParams } = Astro.url

const fetchURL: URL = new URL('https://big-bang-theory-api.lesalvucci.workers.dev/all')
const currentPage = searchParams.get('page') || "1";
fetchURL.searchParams.append('page', currentPage)
fetchURL.searchParams.append('limit', searchParams.get('limit') || "9")
const response = await fetch(fetchURL)
const chars: PaginatedResponse = await response.json()
---

<Layout title="The Big Bang Theory.">
	<main class="bg-gradient-radial from-primary-light-orange to-primary-orange">

		<section class="flex flex-col justify-center items-center bg-gradient-radial from-primary-light-orange via-primary-orange to-bang-red pb-28">
			<header class="flex flex-col justify-center items-center gap-5 pt-20 ">
				<Logo />
				<h2 class="font-title text-4xl">Cast gallery</h2>
			</header>

			<footer class="flex flex-col flex-grow w-3/5 pb-10 py-10 md:py-2">
				<span class="font-title text-2xl text-bang-red">Search</span>
				<input type="text" class="transition w-full h-10 rounded-md focus:outline-none focus:ring-1 focus:ring-zinc-200 border-2 border-bang-red text-bang-red pl-5 bg-primary-light-orange placeholder-zinc-500 text-ellipsis" placeholder="Search by name or character name..." />
				<Pagination currentPage={currentPage} pages={chars.total} />
			</footer>
		</section>

		<div class="flex flex-grow justify-center items-center relative">
			<img src="/img/atom.svg" class="w-32 h-32 absolute opacity-50 -rotate-90" />
		</div>
		
		<section class="container h-full m-auto pt-28">
			<article id="items" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10">
				{
					chars.items.map(char => {
						return (
							<CharacterCard
								name={char.name}
								photourl={char.photo}
								charname={char.charName}
							/>
						)
					})
				}
			</article>
		</section>

		<footer class="flex flex-gros justify-center items-center py-10">
			<Pagination currentPage={currentPage} pages={chars.total} />
		</footer>

	</main>
</Layout>
<script>
	import { PaginatedResponse, Char, CharacherCard } from '../types';

	function renderItems(items: Char[]) {
		const itemsContainer = document.querySelector('#items');
		if (itemsContainer) {
			itemsContainer.innerHTML = '';
			items.forEach(char => {
				const card: CharacherCard = document.createElement('character-card') as CharacherCard;
				card.setAttribute('data-name', char.name);
				card.setAttribute('data-photourl', char.photo ?? '/img/placeholder.png');
				card.setAttribute('data-charname', char.charName);
				card.render();
				itemsContainer.appendChild(card);
			})
		}
	}

	const search = document.querySelector('input');
	if(search) {
	
		search.addEventListener('input', async (e) => {
			if (!(e.target instanceof HTMLInputElement)) {
				return;
			}
			const value = e.target.value;

			// Clear search and retrieve all
			if(value.length === 0) {
				const response = await fetch('https://big-bang-theory-api.lesalvucci.workers.dev/all?page=1&limit=9')
				const paginatedResponse: PaginatedResponse = await response.json();
				renderItems(paginatedResponse.items);
				return;
			}

			// Prevent too short searches
			if (value.length > 0 && value.length < 3) {
				return;
			}

			// Perform search
			const urlSearch = new URLSearchParams();
			urlSearch.append('q', value);
			const response = await fetch('https://big-bang-theory-api.lesalvucci.workers.dev/search?'+urlSearch.toString());
			const items: Char[] = await response.json();
			renderItems(items);
		})
	}
</script>
<style>

</style>
