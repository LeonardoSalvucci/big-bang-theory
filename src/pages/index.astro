---
import Logo from '../components/Logo.astro';
import Layout from '../layouts/Layout.astro';
import CharacterCard from '../components/CharacterCard.astro';
import { PaginatedResponse } from '../types';

const { searchParams } = Astro.url

const fetchURL: URL = new URL('https://big-bang-theory-api.lesalvucci.workers.dev/all')
const currentPage = searchParams.get('page') || "1";
fetchURL.searchParams.append('page', currentPage)
fetchURL.searchParams.append('limit', searchParams.get('limit') || "9")
const response = await fetch(fetchURL)
const chars: PaginatedResponse = await response.json()
---

<Layout title="The Big Bang Theory.">
	<main class="bg-gradient-radial from-primary-light-orange to-primary-orange">
		<div class="container h-full m-auto pb-10">
			<article class="flex flex-col justify-center items-center gap-20">
				<header class="flex flex-col justify-center items-center gap-5 pt-20 pb-10">
					<Logo />
					<h2 class="font-title text-4xl">Cast gallery</h2>
				</header>
				<section class="flex flex-col flex-1 w-3/5">
					<span class="font-title text-2xl text-bang-red">Search</span>
					<input type="text" class="w-full h-10 rounded-md focus:outline-none focus:ring-1 focus:ring-zinc-200 border-2 border-bang-red text-bang-red pl-5 bg-primary-light-orange placeholder-zinc-500 text-ellipsis" placeholder="Search by name or character name..." />
					<div class="flex flex-grow justify-center items-center pt-5">
						<a 
						href={parseInt(currentPage) === 1 ? '#' : `?page=${parseInt(currentPage) - 1}`} 
							class="inline-flex justify-center items-center border-2 border-r-0 border-bang-red bg-transparent text-black rounded-l-xl px-3 py-1 hover:bg-bang-red hover:text-white cursor-pointer">
							<svg aria-hidden="true" class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M7.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd"></path></svg>
							Prev
						</a>
						<span class="inline-flex justify-center items-center border-2 border-bang-red bg-bang-red text-white px-3 py-1 font-title" style="letter-spacing: 3px;">
							{currentPage}
						</span>
						<a
							href={parseInt(currentPage) === chars.pages ? '#' : `?page=${parseInt(currentPage) + 1}`} 
							class="inline-flex justify-center items-center  border-2 border-l-0 border-bang-red bg-transparent text-black rounded-r-xl px-3 py-1 hover:bg-bang-red hover:text-white cursor-pointer">
							Next
							<svg aria-hidden="true" class="w-5 h-5 ml-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
						</a>
					</div>
				</section>
				<section id="items" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10">
					{
						chars.items.map(char => {
							return (
								<CharacterCard
									name={char.name}
									photourl={char.photo}
									charname={char.charName}
								/>
							)
						})
					}
				</section>
			</article>
		</div>
	</main>
</Layout>
<script>
	import { PaginatedResponse, Char, CharacherCard } from '../types';

	function renderItems(items: Char[]) {
		const itemsContainer = document.querySelector('#items');
		if (itemsContainer) {
			itemsContainer.innerHTML = '';
			items.forEach(char => {
				const card: CharacherCard = document.createElement('character-card') as CharacherCard;
				card.setAttribute('data-name', char.name);
				card.setAttribute('data-photourl', char.photo ?? '/img/placeholder.png');
				card.setAttribute('data-charname', char.charName);
				card.render();
				itemsContainer.appendChild(card);
			})
		}
	}

	const search = document.querySelector('input');
	if(search) {
	
		search.addEventListener('input', async (e) => {
			if (!(e.target instanceof HTMLInputElement)) {
				return;
			}
			const value = e.target.value;

			// Clear search and retrieve all
			if(value.length === 0) {
				const response = await fetch('https://big-bang-theory-api.lesalvucci.workers.dev/all?page=1&limit=9')
				const paginatedResponse: PaginatedResponse = await response.json();
				renderItems(paginatedResponse.items);
				return;
			}

			// Prevent too short searches
			if (value.length > 0 && value.length < 3) {
				return;
			}

			// Perform search
			const urlSearch = new URLSearchParams();
			urlSearch.append('q', value);
			const response = await fetch('https://big-bang-theory-api.lesalvucci.workers.dev/search?'+urlSearch.toString());
			const items: Char[] = await response.json();
			renderItems(items);
		})
	}
</script>
<style>

</style>
